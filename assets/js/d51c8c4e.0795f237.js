"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={id:"6_1_Single_Pods",title:"Single container Pods"},l=void 0,s={unversionedId:"Kubernetes/management_APIServer_&_Pod/6_1_Single_Pods",id:"Kubernetes/management_APIServer_&_Pod/6_1_Single_Pods",title:"Single container Pods",description:"Commands",source:"@site/docs/Kubernetes/2_management_APIServer_&_Pod/6_1_Single_Pods.md",sourceDirName:"Kubernetes/2_management_APIServer_&_Pod",slug:"/Kubernetes/management_APIServer_&_Pod/6_1_Single_Pods",permalink:"/docs/Kubernetes/management_APIServer_&_Pod/6_1_Single_Pods",draft:!1,editUrl:"https://github.com/j-peguet/portfolio/blob/master/docs/Kubernetes/2_management_APIServer_&_Pod/6_1_Single_Pods.md",tags:[],version:"current",lastUpdatedAt:1676381131,formattedLastUpdatedAt:"Feb 14, 2023",frontMatter:{id:"6_1_Single_Pods",title:"Single container Pods"},sidebar:"docs",previous:{title:"What is a pod ?",permalink:"/docs/Kubernetes/management_APIServer_&_Pod/6_0_Pods"},next:{title:"Multi-Containers Pods",permalink:"/docs/Kubernetes/management_APIServer_&_Pod/6_2_Multi_Pods"}},c={},i=[{value:"Commands",id:"commands",level:2}],p={toc:i},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("p",null,"2 files are necessary:"),(0,a.kt)("p",null,"pod.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: hello-world-pod\nspec:\n  containers:\n  - name: hello-world\n    image: gcr.io/google-samples/hello-app:1.0\n    ports:\n    - containerPort: 80\n")),(0,a.kt)("p",null,"and deployment.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-world\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-world\n  template:\n    metadata:\n      labels:\n        app: hello-world\n    spec:\n      containers:\n      - name: hello-world\n        image: gcr.io/google-samples/hello-app:1.0\n        ports:\n        - containerPort: 8080\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Start up kubectl get events --watch and background it.\nkubectl get events --watch &\n\n#Create a pod...we can see the scheduling, container pulling and container starting.\nkubectl apply -f pod.yaml\n\n#Start a Deployment with 1 replica. We see the deployment created, scaling the replica set and the replica set starting the first pod\nkubectl apply -f deployment.yaml\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Scale a Deployment to 2 replicas. We see the scaling the replica set and the replica set starting the second pod\nkubectl scale deployment hello-world --replicas=2\n\n#We start off with the replica set scaling to 1, then  Pod deletion, then the Pod killing the container \nkubectl scale deployment hello-world --replicas=1\n\nkubectl get pods\n\n#Let's use exec a command inside our container, we can see the GET and POST API requests through the API server to reach the pod.\nkubectl -v 6 exec -it PASTE_POD_NAME_HERE -- /bin/sh\nps\nexit\n\n#Let's look at the running container/pod from the process level on a Node.\nkubectl get pods -o wide\nssh aen@c1-node2\nps -aux | grep hello-app\nexit\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Now, let's access our Pod's application directly, without a service and also off the Pod network.\nkubectl port-forward PASTE_POD_NAME_HERE 80:8080\n\n#Let's do it again, but this time with a non-priviledged port\nkubectl port-forward PASTE_POD_NAME_HERE 8080:8080 &\n\n#We can point curl to localhost, and kubectl port-forward will send the traffic through the API server to the Pod\ncurl http://localhost:8080\n\n#Kill our port forward session.\nfg\nctrl+c\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete deployment hello-world\nkubectl delete pod hello-world-pod\n\n#Kill off the kubectl get events\nfg\nctrl+c\n")))}u.isMDXComponent=!0}}]);