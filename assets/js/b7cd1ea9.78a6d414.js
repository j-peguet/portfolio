"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4999:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={id:"5_2_Secrets",title:"Secrets"},l=void 0,o={unversionedId:"Kubernetes/kubernetes_storage_&_scheduling/5_2_Secrets",id:"Kubernetes/kubernetes_storage_&_scheduling/5_2_Secrets",title:"Secrets",description:"* Store sensitive information as Objects",source:"@site/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_2_Secrets.md",sourceDirName:"Kubernetes/3_kubernetes_storage_&_scheduling",slug:"/Kubernetes/kubernetes_storage_&_scheduling/5_2_Secrets",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/5_2_Secrets",draft:!1,editUrl:"https://github.com/j-peguet/portfolio/blob/master/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_2_Secrets.md",tags:[],version:"current",lastUpdatedAt:1676381131,formattedLastUpdatedAt:"Feb 14, 2023",frontMatter:{id:"5_2_Secrets",title:"Secrets"},sidebar:"docs",previous:{title:"Environment Variables",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/5_1_Env_variables"},next:{title:"ConfigMaps",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/5_3_ConfigMaps"}},i={},c=[{value:"Properties of Secrets",id:"properties-of-secrets",level:2},{value:"Create a Secret",id:"create-a-secret",level:2},{value:"Unsing secret in Pods",id:"unsing-secret-in-pods",level:2},{value:"Unsing secret in Environment Variables",id:"unsing-secret-in-environment-variables",level:3},{value:"Unsing secret as Files",id:"unsing-secret-as-files",level:3},{value:"Demo 1",id:"demo-1",level:2},{value:"Demo 2",id:"demo-2",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Store sensitive information as Objects"),(0,a.kt)("li",{parentName:"ul"},"Retrieve for later use"),(0,a.kt)("li",{parentName:"ul"},"Passwords, API tokens, keys and certificates"),(0,a.kt)("li",{parentName:"ul"},"Safer and more flexible configurations (Pod Specs and Images)")),(0,a.kt)("h2",{id:"properties-of-secrets"},"Properties of Secrets"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"base64 encoded"),(0,a.kt)("li",{parentName:"ul"},"Encryption can be configured"),(0,a.kt)("li",{parentName:"ul"},"Stored in etcd"),(0,a.kt)("li",{parentName:"ul"},"Namespaced and can only be referenced by Pods in the same Namespace"),(0,a.kt)("li",{parentName:"ul"},"Unavailable Secrets will prevent a Pods from starting up")),(0,a.kt)("p",null,"More info available here: ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/"},"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/")),(0,a.kt)("p",null,"They are 3 different types of secret in Kubernetes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Docker registry"),(0,a.kt)("li",{parentName:"ul"},"generic - create from local file/directory or value from command line"),(0,a.kt)("li",{parentName:"ul"},"TLS")),(0,a.kt)("h2",{id:"create-a-secret"},"Create a Secret"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic app1 \\\n    --from-literal=USERNAME=app1login \\\n    --from-literal=PASSWORD='S0methingS@Str0ng!'\n")),(0,a.kt)("p",null,"you can also use --from-file or --from-directory"),(0,a.kt)("h2",{id:"unsing-secret-in-pods"},"Unsing secret in Pods"),(0,a.kt)("p",null,"But how can our container based applications can be access to our secrets."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Environment Variables"),(0,a.kt)("li",{parentName:"ul"},"Volumes or Files - tmpfs mounted file exposed"),(0,a.kt)("li",{parentName:"ul"},"Reference Secret ",(0,a.kt)("strong",{parentName:"li"},"must")," be created and accessible for the Pod to start up - if is not available the Pod can't start")),(0,a.kt)("h3",{id:"unsing-secret-in-environment-variables"},"Unsing secret in Environment Variables"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n    containers:\n    - name: hello-world\n    ...\n    env:\n    - name: app1username\n      valueFrom:\n        secretKeyRef:\n            name: app1\n            key: USERNAME\n    - name: app1password\n      valueFrom:\n        secretKeyRef:\n            name: app1\n            key: PASSWORD\n")),(0,a.kt)("p",null,"It's a little big longer... we have better"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n    containers:\n    - name: hello-world\n    ...\n    envFrom:\n    - secretRef:\n        name: app1\n")),(0,a.kt)("p",null,"In this case each key and value pair inside of that secret. An environment variable is created, without need to specify them."),(0,a.kt)("h3",{id:"unsing-secret-as-files"},"Unsing secret as Files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'spec:\n    volumes:\n    - name: appconfig\n      secret:\n        secretName: app1\n    containers:\n    ...\n    volumeMounts:\n        - name: appconfig\n          mountPath: "/etc/appconfig"\n')),(0,a.kt)("p",null,"In the directory container, for each key whey have a file named like the name of our pair. The value is in the file."),(0,a.kt)("p",null,"For ou example whe have to file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"/etc/appconfig/USERNAME"),(0,a.kt)("li",{parentName:"ul"},"/etc/appconfig/PASSWORD")),(0,a.kt)("h2",{id:"demo-1"},"Demo 1"),(0,a.kt)("p",null,"Creating and accessing Secrets"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Generic - Create a secret from a local file, directory or literal value\n#They keys and values are case sensitive\nkubectl create secret generic app1 \\\n    --from-literal=USERNAME=app1login \\\n    --from-literal=PASSWORD='S0methingS@Str0ng!'\n\n\n#Opaque means it's an arbitrary user defined key/value pair. Data 2 means two key/value pairs in the secret.\n#Other types include service accounts and container registry authentication info\nkubectl get secrets\n\n#app1 said it had 2 Data elements, let's look\nkubectl describe secret app1\n\n#If we need to access those at the command line...\n#These are wrapped in bash expansion to add a newline to output for readability\necho $(kubectl get secret app1 --template={{.data.USERNAME}} )\necho $(kubectl get secret app1 --template={{.data.USERNAME}} | base64 --decode )\n\necho $(kubectl get secret app1 --template={{.data.PASSWORD}} )\necho $(kubectl get secret app1 --template={{.data.PASSWORD}} | base64 --decode )\n")),(0,a.kt)("h2",{id:"demo-2"},"Demo 2"),(0,a.kt)("p",null,"Accessing Secrets inside a Pod"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#As environment variables\nkubectl apply -f deployment-secrets-env.yaml\n\nPODNAME=$(kubectl get pods | grep hello-world-secrets-env | awk '{print $1}' | head -n 1)\necho $PODNAME\n\n#Now let's get our enviroment variables from our container\n#Our Enviroment variables from our Pod Spec are defined\n#Notice the alpha information is there but not the beta information. Since beta wasn't defined when the Pod started.\nkubectl exec -it $PODNAME -- /bin/sh\nprintenv | grep ^app1\nexit\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Accessing Secrets as files\nkubectl apply -f deployment-secrets-files.yaml\n\n#Grab our pod name into a variable\nPODNAME=$(kubectl get pods | grep hello-world-secrets-files | awk '{print $1}' | head -n 1)\necho $PODNAME\n\n#Looking more closely at the Pod we see volumes, appconfig and in Mounts...\nkubectl describe pod $PODNAME\n\n#Let's access a shell on the Pod\nkubectl exec -it $PODNAME -- /bin/sh\n\n#Now we see the path we defined in the Volumes part of the Pod Spec\n#A directory for each KEY and it's contents are the value\nls /etc/appconfig\ncat /etc/appconfig/USERNAME\ncat /etc/appconfig/PASSWORD\nexit\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#If you need to put only a subset of the keys in a secret check out this line here and look at items\n#https://kubernetes.io/docs/concepts/storage/volumes#secret\n\n#let's clean up after our demos...\nkubectl delete secret app1\nkubectl delete deployment hello-world-secrets-env\nkubectl delete deployment hello-world-secrets-files\n")))}d.isMDXComponent=!0}}]);