"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9098],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),g=o,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||a;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},232:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],s={id:"6_Access_to_private_registry",title:"Accessing a Private Container Registry"},l=void 0,c={unversionedId:"Kubernetes/kubernetes_storage_&_scheduling/6_Access_to_private_registry",id:"Kubernetes/kubernetes_storage_&_scheduling/6_Access_to_private_registry",title:"Accessing a Private Container Registry",description:"* Secrets for application configuration",source:"@site/docs/Kubernetes/3_kubernetes_storage_&_scheduling/6_Access_to_private_registry.md",sourceDirName:"Kubernetes/3_kubernetes_storage_&_scheduling",slug:"/Kubernetes/kubernetes_storage_&_scheduling/6_Access_to_private_registry",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/6_Access_to_private_registry",editUrl:"https://github.com/j-peguet/portfolio/blob/master/docs/Kubernetes/3_kubernetes_storage_&_scheduling/6_Access_to_private_registry.md",tags:[],version:"current",lastUpdatedAt:1613556017,formattedLastUpdatedAt:"2/17/2021",sidebarPosition:6,frontMatter:{id:"6_Access_to_private_registry",title:"Accessing a Private Container Registry"},sidebar:"docs",previous:{title:"ConfigMaps",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/5_3_ConfigMaps"},next:{title:"Scheduling",permalink:"/docs/Kubernetes/kubernetes_storage_&_scheduling/7_Scheduling"}},u=[{value:"Demo",id:"demo",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Secrets for application configuration"),(0,a.kt)("li",{parentName:"ul"},"Use Secrets to access a private container registry"),(0,a.kt)("li",{parentName:"ul"},"Want to access registries over the Internet",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Docker Hub"),(0,a.kt)("li",{parentName:"ul"},"Cloud based container registries"))),(0,a.kt)("li",{parentName:"ul"},"Create a Secret of type docker-registry"),(0,a.kt)("li",{parentName:"ul"},"Enabling Kubernetes (kubelet) to pull the images from the private registry")),(0,a.kt)("h2",{id:"demo"},"Demo"),(0,a.kt)("p",null,"Pulling a Container from a Private Container Registry."),(0,a.kt)("p",null,'In this demo, don\'t forget to change the username here "nocentino"'),(0,a.kt)("p",null,"First, you need a private repository in our registry, follow the directions here ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/docker-hub/repos/#private-repositories"},"https://docs.docker.com/docker-hub/repos/#private-repositories")),(0,a.kt)("p",null,"Create the file deployment-private-registry.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-world-private-registry\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-world-private-registry\n  template:\n    metadata:\n      labels:\n        app: hello-world-private-registry\n    spec:\n      containers:\n      - name: hello-world\n        image: nocentino/hello-app:ps\n        ports:\n          - containerPort: 8080\n      imagePullSecrets:\n      - name: private-reg-cred\n")),(0,a.kt)("p",null,"Pull a container, tag locally, and then push it into our private registry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#Then let's log into docker...I've already done this so it's using the configuration in config.json\nsudo docker login \n\n#Let's pull down a hello-world image from gcr\nsudo docker pull gcr.io/google-samples/hello-app:1.0\n\n#Let's get our image ID so we can tag it locally\nsudo docker image ls gcr.io/google-samples/hello-app\n\n#tagging our image in the format your registry, image and tag\n#You'll be using your own repository, so update that information here. \nsudo docker tag bc5c421ecd6c nocentino/hello-app:ps\n\n#Now push that locally tagged image into our private registry at docker hub\n#You'll be using your own repository, so update that information here. \nsudo docker push nocentino/hello-app:ps\n\n#We need to adjust permissions on our config.json file, since I did a sudo docker login earlier...\nsudo chown $(id -u):$(id -g) ~/.docker/\nsudo chown $(id -u):$(id -g) ~/.docker/config.json\n")),(0,a.kt)("p",null,"Create our secret that we'll use for our image pull...from our docker config.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#This is of type generic, for docker-registry, look at line 48\nkubectl create secret generic private-reg-cred \\\n    --from-file=.dockerconfigjson=/home/aen/.docker/config.json \\\n    --type=kubernetes.io/dockerconfigjson\n\n#...or if needed we can specify this explicitly using the following parameters\nkubectl create secret docker-registry private-reg-cred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=$USERNAME \\\n    --docker-password=$PASSWORD \\\n    --docker-email=$EMAIL\n")),(0,a.kt)("p",null,"Ensure the image doesn't exist on any of our nodes...or else we can get a false positive"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#you'll be using your own repository, so update that information here.\nssh jules@c1-node1 'sudo docker rmi nocentino/hello-app:ps'\nssh jules@c1-node2 'sudo docker rmi nocentino/hello-app:ps'\n\n#Create a deployment using imagePullSecret in the Pod Spec.\nkubectl apply -f deployment-private-registry.yaml\n\n#Check out Containers and events section to ensure the container was actually pulled.\n#This is why I made sure they were deleted from each Node above. \nkubectl describe pods hello-world\n\n#clean up after our demo\nkubectl delete -f deployment-private-registry.yaml\nkubectl delete secret private-reg-cred\nsudo docker rmi nocentino/hello-app:ps\n")))}d.isMDXComponent=!0}}]);